tam[i]<- length(k)
}
w<- which(tam<= 15)
jj<- j[,-w]
return(jj)
}
cate(iris)
cate<- function(datos){
#y <-lapply(datos, class)
t<- NULL
for(i in 1:length(colnames(datos))){
y[i]<- class(data[i])
}
#t<- unlist(y, use.names = TRUE)
d <- which((t == 'character') ||(t == 'factor') || (t == 'logical') )
if (length(d)>0){
j<- datos[,-d]
}else{j<- datos}
tam<- NULL
for (i in 1:length(j)){
p <- as.numeric(j[[i]])
k <- summary(as.factor(p))
tam[i]<- length(k)
}
w<- which(tam<= 15)
jj<- j[,-w]
return(jj)
}
cate(iris)
y <- lapply(iris, class)
lapply(iris, class)
y <- lapply(iris, class)
t<- unlist(y, use.names = TRUE)
t
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
bondad <- function(data){
Pval <- NULL
for (i in 1:length(data)) {
prueba <- shapiro.test(data[[i]])
Pval[i] <- prueba[[2]]
}
return(Pval)
}
bondad(iris)
bondad(iris[-5])
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
?t
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
?data.frame
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
as.data.frame(c(1,2,3))
matrix(c(1,2,3))
matrix(c(1,2,3),byrow = T)
matrix(c(1,2,3),byrow = F)
matrix(c(1,2,3),byrow = T)
matrix(c(1,2,3),byrow = F)
?matrix
matrix(c(1,2,3),ncol = 3)
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
?as.data.frame
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
shiny::runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
plot(iris$Sepal.Length,iris$Petal.Length)
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
plot(iris$Sepal.Length,iris$Petal.Width)
plot(iris$Sepal.Length,iris$Petal.Width)
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
install.packages("ggplot2")
library(ggplot2)
ggplot(data=iris, aes(chol$AGE)) +
geom_histogram(breaks=seq(20, 50, by =2),
col="red",
fill="green",
alpha = .2)
ggplot(data=iris, aes(chol$AGE)) +
geom_histogram(breaks=seq(20, 50, by =2),
col="red",
fill="green",
alpha = .2)
ggplot(data=iris, aes(iris$Sepal.Length)) +
geom_histogram(breaks=seq(20, 50, by =2),
col="red",
fill="green",
alpha = .2)
ggplot(data=iris, aes(iris$Sepal.Length)) +
geom_histogram(
col="red",
fill="green",
alpha = .2)
ggplot(data=iris, aes('Sepal.Length')) +
geom_histogram(
col="red",
fill="green",
alpha = .2)
ggplot(data=iris, aes(Sepal.Length)) +
geom_histogram(
col="red",
fill="green",
alpha = .2)
ggplot( aes(iris$Sepal.Length)) +
geom_histogram(
col="red",
fill="green",
alpha = .2)
ggplot( aes(iris$Sepal.Length)) +
geom_histogram(
col="red",
fill="green",
alpha = .2)
ggplot(data=iris, aes(iris[,1])) +
geom_histogram(
col="red",
fill="green",
alpha = .2)
posi <- which(colnames(datosSC())== input$columns2 )
shiny::runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
?vglm
??vglm
shiny::runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
glm1 <- glm(Sepal.Length ~. ,data= iris4)
iris4 <- iris
glm1 <- glm(Sepal.Length ~. ,data= iris4)
plot(glm1)
x11()
plot(glm1)
glm1$family
summary(glm1)
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = poisson)
glm1$family
summary(glm1)
runApp('~/GLM/Riesgo-de-Credito-master/App/appTemplate')
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = poisson)
summary(glm1)
iris4 <- iris
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = poisson)
summary(glm1)
glm1$family
iris4
iris4 <- iris
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = poisson)
plot(glm1)
summary(glm1)
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = binomial)
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = binomial)
glm1 <- glm(Sepal.Length ~. ,data= iris4)
plot(glm1)
summary(glm1)
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = binomial(link = "logit"))
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = binomial(link = "probit"))
glm1 <- glm(Sepal.Length ~. ,data= iris4)
summary(glm1)
gml1$family
glm1$family
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = binomial(link = 'logit'))
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = Gamma(link = "inverse"))
plot(glm1)
summary(glm1)
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = quasibinomial())
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = quasipoisson())
summary(glm1)
glmnorm <- function(data2,nombre){
pos <- which(colnames(data1) == nombre)
colnames(data2)[pos] <- 'dependiente'
modelo1 <- glm(dependiente ~. , data=data2)
}
glmnorm(iris4,Sepal.Length)
glmnorm <- function(data2,nombre){
pos <- which(colnames(data2) == nombre)
colnames(data2)[pos] <- 'dependiente'
modelo1 <- glm(dependiente ~. , data=data2)
}
glmnorm(iris4,Sepal.Length)
glmnorm(iris4,Sepal.Length)
glmnorm <- function(data2,nombre){
pos <- which(colnames(data2) == nombre)
colnames(data2)[pos] <- 'dependiente'
modelo1 <- glm(dependiente ~. , data=data2)
}
glmnorm(iris,Sepal.Length)
colnames(data2)[pos] <- 'dependiente'
glmnorm <- function(data2,nombre){
pos <- which(colnames(data2) == nombre)
colnames(data2)[pos] <- "dependiente"
modelo1 <- glm(dependiente ~. , data=data2)
}
glmnorm(iris,Sepal.Length)
RS <- function(data1,nombre){
posi <- which(colnames(data1) == nombre)
colnames(data1)[posi] <- 'dependiente'
modelo <- lm(dependiente ~. , data=data1)
return(list(modelo, summary(modelo)))
}
RS(iris4, Sepal.Length)
RS(iris4, iris4$Sepal.Length)
RS(iris, iris$Sepal.Length)
cate<- function(datos){
y <- lapply(datos, class)
t<- unlist(y, use.names = TRUE)
d <- which((t == 'character') ||(t == 'factor') || (t == 'logical') )
if (length(d)>0){
j<- datos[,-d]
}else{j<- datos}
tam<- NULL
for (i in 1:length(j)){
p <- as.numeric(j[[i]])
k <- summary(as.factor(p))
tam[i]<- length(k)
}
w<- which(tam<= 15)
jj<- j[,-w]
return(jj)
}
h <- cate(iris)
RS(h,h$Sepal.Length)
RS(h,Sepal.Length)
View(h)
RS(h,Sepal.Width)
RS(h,h$Petal.Width)
RS(h,Petal.Width)
RS(h,Sepal.Length)
RS(h,SepalSepal.Length)
RS(h,Sepal.Length)
colnames(h)
RS(h,"Sepal.Length")
glmnorm(iris4,"Sepal.Length")
prueba1<- glmnorm(iris4,"Sepal.Length")
summary(prueba1)
prueba1$family
View(iris4)
glmnorm <- function(data2,nombre){
pos <- which(colnames(data2) == nombre)
colnames(data2)[pos] <- "dependiente"
modelo1 <- glm(dependiente ~. , data=data2)
return(list(modelo, summary(modelo)))
}
prueba1<- glmnorm(iris4,"Sepal.Length")
prueba1
iris4 <- iris
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = quasipoisson())
summary(glm1)
glmpoi <- function(data3,nombre){
pos <- which(colnames(data3) == nombre)
colnames(data3)[pos] <- "dependiente"
modelo1 <- glm(dependiente ~. , data=data3, family = poisson(link = "log"))
return(list(modelo, summary(modelo)))
}
prueba2 <- glmpoi(iris4,"Sepal.Length")
prueba2
glm1 <- glm(Sepal.Length ~. ,data= iris4, family = poisson(link = "log"))
summary(glm1)
glmpoi <- function(data3,nombre){
pos <- which(colnames(data3) == nombre)
colnames(data3)[pos] <- "dependiente"
modelo1 <- glm(dependiente ~. , family = poisson(link = "log"), data=data3)
return(list(modelo, summary(modelo)))
}
prueba2 <- glmpoi(iris4,"Sepal.Length")
prueba2
pos
pos <- which(colnames(data3) == nombre)
glmpoi <- function(data3,nombre){
pos <- which(colnames(data3) == nombre)
colnames(data3)[pos] <- "dependiente"
modelo1 <- glm(dependiente ~. , family = poisson(link = "log"), data=data3)
return(list(modelo, summary(modelo)))
}
prueba2 <- glmpoi(iris,"Sepal.Length")
prueba2
h <- cate(iris)
RS(h,"Sepal.Length")
prueba2$family
glmpoi <- function(data3,nombre){
pos <- which(colnames(data3) == nombre)
colnames(data3)[pos] <- "dependiente"
modelo1 <- glm(dependiente ~. , family = poisson(link = "log"), data = data3)
return(list(modelo, summary(modelo)))
}
prueba2 <- glmpoi(iris,"Sepal.Length")
prueba2
prueba2$family
colnames(iris)[Sepal.Length]
colnames(iris)[3]
colnames(iris)[1]
colnames(iris)[2]
colnames(iris)[3]
colnames(iris)[4]
colnames(iris)[5]
colnames(iris)[6]
which(colnames(iris) == Species)
f<- which(colnames(iris) == Species)
f
class(f)
f<- which(colnames(iris) == Petal.Length)
f
colnames(iris)[which(colnames(iris) == Petal.Length)]
colnames(iris4) == Sepal.Length
colnames(iris4)
colnames(iris4) == 'Sepal.Length'
glmpoi <- function(data3,nombre){
pos <- which(colnames(data3) == 'nombre')
colnames(data3)[pos] <- "dependiente"
modelo1 <- glm(dependiente ~. , family = poisson(link = "log"), data = data3)
return(list(modelo, summary(modelo)))
}
prueba2 <- glmpoi(iris,"Sepal.Length")
glmpoi <- function(data3,nombre){
pos <- which(colnames(data3) == nombre)
colnames(data3)[pos] <- "dependiente"
modelo1 <- glm(dependiente ~. , family = poisson(link = "log"), data = data3)
return(list(modelo, summary(modelo)))
}
prueba2 <- glmpoi(iris,"Sepal.Length")
prueba2
prueba2$family
colnames(iris4)[which(colnames(iris4) == 'Sepal.Length')]
glmpoi <- function(data3,nombre){
pos <- which(colnames(data3) == nombre)
colnames(data3)[pos] <- 'dependiente'
modelo1 <- glm(dependiente ~. , family = poisson(link = "log"), data = data3)
return(list(modelo, summary(modelo)))
}
prueba2 <- glmpoi(iris,"Sepal.Width")
prueba2
prueba2$family
glmpoi <- function(data3,nombre){
pos <- which(colnames(data3) == nombre)
colnames(data3)[pos] <- 'dependiente'
modelo2 <- glm(dependiente ~. , family = poisson(link = "log"), data = data3)
return(list(modelo, summary(modelo)))
}
prueba2 <- glmpoi(iris,"Sepal.Width")
prueba2
prueba2$family
glmpoi <- function(data3,nombre){
pos <- which(colnames(data3) == nombre)
colnames(data3)[pos] <- 'dependiente'
modelo2 <- glm(dependiente ~. , family = poisson(link = "log"), data = data3)
return(list(modelo2, summary(modelo2)))
}
prueba2 <- glmpoi(iris,"Sepal.Width")
prueba2
prueba2$family
prueba1<- glmnorm(iris4,"Sepal.Length")
summary(prueba1)
prueba1$family
prueba1<- glmnorm(iris4,"Sepal.Length")
glmnorm <- function(data2,nombre){
pos <- which(colnames(data2) == nombre)
colnames(data2)[pos] <- "dependiente"
modelo1 <- glm(dependiente ~. , data=data2)
return(list(modelo1, summary(modelo1)))
}
prueba1<- glmnorm(iris4,"Sepal.Length")
summary(prueba1)
prueba1<- glmnorm(iris4,"Sepal.Length")
prueba1
prueba1$family
#Binomial datos no agrupados
glmbinoagru <- function(data4,nombre){
pos <- which(colnames(data4) == nombre)
colnames(data4)[pos] <- 'dependiente'
modelo3 <- glm(dependiente ~. , family = binomial(link = "logit"), data = data4)
return(list(modelo3, summary(modelo3)))
}
prueba3 <- glmbinoagru(iris4,"Sepal.Width")
prueba
prueba3
help(package = "datasets")
View(Titanic)
View(volcano)
View(rivers)
View(cars)
View(Cars93)
View(ability.cov)
View(HairEyeColor)
View(infert)
View(Nile)
View(mtcars)
View(Orange)
View(occupationalStatus)
View(presidential)
View(presidents)
View(pressure)
View(PlantGrowth)
View(quakes)
View(randu)
View(rock)
View(state.x77)
View(swiss)
View(trees)
View(UScrime)
View(USArrests)
View(USJudgeRatings)
View(UScereal)
View(USMortality)
View(USRegionalMortality)
#Binomial datos no agrupados
glmbinoagru <- function(data4,nombre){
pos <- which(colnames(data4) == nombre)
colnames(data4)[pos] <- 'dependiente'
modelo3 <- glm(dependiente ~. , family = binomial(link = "logit"), data = data4)
return(list(modelo3, summary(modelo3)))
}
prueba3 <- glmbinoagru(USMortality,"Rate")
prueba3
?quasi
v <- 1:10
d <- c(0.3,0.8,1.2,1.9,2.1,2.6,2.8,3.9,4.5,5.7)
s <- c('a','b','c','ab','ac','bc','abc','a','b','ab')
glm(v ~ d + s, family = binomial(link = "logit"))
v <- 0:10:1
v <- c(0,0,1,0,1,1,1,0,1,0)
d <- c(0.3,0.8,1.2,1.9,2.1,2.6,2.8,3.9,4.5,5.7)
s <- c('a','b','c','ab','ac','bc','abc','a','b','ab')
glm(v ~ d + s, family = binomial(link = "logit"))
v <- c(0,0,1,0,1,1,1,0,1,0.5)
d <- c(0.3,0.8,1.2,1.9,2.1,2.6,2.8,3.9,4.5,5.7)
s <- c('a','b','c','ab','ac','bc','abc','a','b','ab')
glm(v ~ d + s, family = binomial(link = "logit"))
v <- c(0,0,1,0,1,2,1,0,1,0.5)
d <- c(0.3,0.8,1.2,1.9,2.1,2.6,2.8,3.9,4.5,5.7)
s <- c('a','b','c','ab','ac','bc','abc','a','b','ab')
glm(v ~ d + s, family = binomial(link = "logit"))
fnf75_85 <- read.table(url("http://archivos-para-subir.googlegroups.com/web/F-NF1975-85.txt?gda=f500bkEAAACkOfwqHAVd4YqgfIB09GDRCcOUO-z8uvHRarwVOPM5xOEDwyLfg5d1mmtcx5AUJ3JTCT_pCLcFTwcI3Sro5jAzlXFeCn-cdYleF-vtiGpWAA"), header = T, dec = ".", sep = "\t")
glm(cbind(v,v)~ d + s, family = binomial(link = "logit"))
v2 <- c(0,0,1,0,1,2,1,0,1,0.7)
glm(cbind(v,v2)~ d + s, family = binomial(link = "logit"))
glm(cbind(v)~ d + s, family = binomial(link = "logit"))
glm(v~ d + s, family = binomial(link = "logit"))
v <- c(0,0,1,0,1,2,1,0,1,0.5)
glm(v~ d + s, family = binomial(link = "logit"))
v <- c(0,0,1,0,1,0,1,0,1,0.5)
glm(v~ d + s, family = binomial(link = "logit"))
glm(cbind(v)~ d + s, family = binomial(link = "logit"))
#Binomial datos no agrupados
glmbinoagru <- function(data4,nombre){
pos <- which(colnames(data4) == nombre)
colnames(data4)[pos] <- 'dependiente'
modelo3 <- glm(cbind(dependiente)  ~. , family = binomial(link = "logit"), data = data4)
return(list(modelo3, summary(modelo3)))
}
v <- c(0,0,1,0,1,0,1,0,1,0.5)
v2 <- c(0,0,1,0,1,2,1,0,1,0.7)
prueba3 <- glmbinoagru(cbind(v,v2,s,d),"v")
glm(cbind(v)~ d + s, family = binomial(link = "logit"))
glm(cbind(v,v2)~ d + s)
glm(cbind(Sepal.Length,Sepal.Width) ~ Petal.Length+ Species, data = iris)
glm(Sepal.Length ~ Petal.Length+ Species, data = iris)
glm(cbind(Sepal.Length,Sepal.Width) ~ Petal.Length+ Species, data = iris, family = poisson(link = "log"))
glm(cbind(v,v2)~ d + s, family = quasibinomial(link = "logit"))
v3 <- c(0,0.8,1,0,1,0,1,0,1,0.7)
glm(cbind(v,v2,v3)~ d + s, family = quasibinomial(link = "logit"))
v2 <- c(0,0,1,0,1,1,1,0,1,0.7)
glm(cbind(v,v2,v3)~ d + s, family = quasibinomial(link = "logit"))
glm(cbind(v,v3)~ d + s, family = quasibinomial(link = "logit"))
cbind(cbind(v,v2))
cbind(v,v2)
glm(cbind(v)~ d + s, family = quasibinomial(link = "logit"))
glm(cbind(v)~ d + s, family = binomial(link = "logit"))
s2<- c('a','b','c')
s3<- c('a','c')
which(s2 == s3)
s3<- c('a','c','d')
which(s2 == s3)
glmpoi <- function(data3,nombre,enlace){
pos <- which(colnames(data3) == nombre)
colnames(data3)[pos] <- 'dependiente'
modelo2 <- glm(dependiente ~. , family = poisson(link = enlace), data = data3)
return(list(modelo2, summary(modelo2)))
}
prueba2 <- glmpoi(iris,"Sepal.Width","identity")
prueba2
